#!/bin/bash

# Note: Must use recent ffmpeg (>2.0) instead of libav-tools' avconv for -vf subtitles to work!

# cpu-used for -deadline realtime: 0 is best and slowest, 16 is worst quality and fastest
# Note: Turion N54L is too slow to transcode 1080p libx265 to libvpx. -vf scale doesn't help.
# 1080p sources cannot be x265, and x265 sources can be at most 720p with the following setting.
cpu_used=4

# Target bitrate; Google Cast extension suggests Standard (1700k), High (3000k), Extreme (5000k).
bitrate=1700k

# Target quality mode; 4 (best) to 63 (worst)
quality=10

# Volume scale (if desired)
#volume=3

# XXX -threads auto does not yet work for libvpx, so always use all cores.
numcores=$(grep -c processor /proc/cpuinfo)
video=$1
extension=$([[ "${video}" = *.* ]] && echo ".${video##*.}" || echo '')
subopt=
subargs=
mkvinfo_pat='Track.*audio'
ffmpeg_pat='Stream.*Video'

case ${extension} in
	.mkv)
		audiolang=$(mkvinfo -s "$1" | head -10 | grep "${mkvinfo_pat}" | sed 's/^.*language: \([^,]*\).*$/\1/')
		if [ -z "$(echo ${audiolang} | grep ${mkvinfo_pat})" ] && ( [ -z "${audiolang}" ] || [ "${audiolang}" = "und" ] ); then
			# Try to extract from ffmpeg instead.  Try to output to '/' to force exit.
			audiolang=$(ffmpeg -i "$1" -vcodec copy -acodec copy / 2>&1 | grep "${ffmpeg_pat}" | sed 's/^.*Stream.*(\(.*\)):.*Video.*$/\1/g')
		fi
		if [ -z "$(echo ${audiolang} | grep ${mkvinfo_pat})" ] && [ -z "$(echo ${audiolang} | grep ${ffmpeg_pat})" ] && [ "${audiolang}" != 'eng' ]; then
			subopt="-vf"
			# See https://ffmpeg.org/ffmpeg-filters.html#Notes-on-filtergraph-escaping about this insanity
			# First level escaping (:\').
			subargs=$(echo $1 | sed 's/\([:\\]\)/\\\1/g' | sed "s/\\('\\)/\\\\\1/g")
			# Second level escaping (\'[].;).
			subargs=$(echo ${subargs} | sed "s/\([\\'\.;]\)/\\\\\1/g" | sed 's/\[/\\[/g;s/\]/\\]/g')
			# Don't perform third level escaping (shell escape) since we are in the shell.
			# Finally, the full -vf argument string.
			subargs="subtitles=${subargs}"
			echo ${subargs}
		fi
		;;
	.iso)
		# Enable this when HandBrake can transcode to webm: https://github.com/HandBrake/HandBrake/issues/388
		# exec HandBrakeCLI -Z 'Chromecast 1080p30 Surround' -i $1 -o /dev/stdout
		;;

esac
# Other container formats have separate subtitle files.
# TODO

if [ ! -z "${volume}" ]; then
  audiofilter="-af"
  audiofilter_arg="volume=${volume}"
fi

############################
# Leftover stuff from original just for reference
#legenda=""
comLegenda=0
#Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, AlphaLevel, Encoding
subtitleStyle="Default,Arial,20,65535,65535,&H0,&H0,0,0,0,1,1,0,2,10,10,10,0,0"

#Levar em conta que as extensÃµes podem estar maiusculas
#IFS=$(echo -e "\t\n")
#for tmpfile in $(echo $video | sed 's/....$/*/')*; do
#    filename=$(basename "$tmpfile")
#    extension="${filename##*.}"
#    echo $extension
#    if [ "$extension" == "ass" ]; then
#        echo 'Legenda ASS encontrada'
#        legenda=$(echo $video | sed 's/...$/ass/')
#        comLegenda=1
#    elif [ "$extension" == "srt" ]; then
#        echo 'Legenda SRT encontrada'
#        legenda=$(echo $video | sed 's/...$/srt/')
#        comLegenda=1
#    elif [ "$extension" == "ssa" ]; then
#        echo 'Legenda SSA encontrada'
#        legenda=$(echo $video | sed 's/...$/ssa/')
#        comLegenda=1
#    elif [ "$extension" == "sub" ]; then
#        echo 'Legenda SubRip encontrada'
#        legenda=$(echo $video | sed 's/...$/sub/')
#        comLegenda=1
#    fi
#
#done
#############################

if [ $comLegenda == 1 ]; then
    encoding=$(file -bi "$legenda" | sed -e 's/.*[ ]charset=//')
    encoding=`echo "$encoding" | tr [:lower:] [:upper:]`

    ffmpeg -y -sub_charenc "$encoding" -i "$legenda" "/tmp/legenda.ass"
    sed -i '/Style: /c\Style: '$subtitleStyle'' /tmp/legenda.ass
    exec ffmpeg -i "$video" -y -c:v libvpx -b:v 5M -crf 10 -c:a libvorbis -cpu-used 16 -threads 8 -f webm -vf subtitles="/tmp/legenda.ass" -map 0 -map -0:s "$2"

elif [ ${video##*.} == webm ]; then
    #exec ffmpeg -i "$video" -y -vcodec copy -acodec copy -f webm "$2"
    exec ffmpeg -i "$video" -y -vcodec copy -acodec copy -f webm "$2"
else
    # Always transcode the first video and first audio stream.
    IFS=  # Don't tokenize subargs.
    ffmpeg -y -i "${video}" -rtbufsize 100M -map v:0:0 -map a:0:0 -c:v libvpx -b:v ${bitrate} -crf ${quality} -threads ${numcores} -quality realtime -cpu-used ${cpu_used} ${subopt} ${subargs} -acodec libvorbis -ar 48000 -ac 2 -aq 7 ${audiofilter} ${audiofilter_arg} -f webm - > "$2"
    #ffmpeg -y -i "${video}" -map v:0:0 -map a:0:0 -vcodec libvpx -b:v 4096k ${subopt} ${subargs} -acodec libvorbis -ar 48000 -ac 2 -ab 448000 -af volume=3 -threads ${numcores} -deadline realtime -rtbufsize 100M -f webm -t 600 - | LC_COLLATE=null sed -r 's/(\x18\x53\x80\x67\x01)[\x00-\xff]{7}/\1\x00\x00\x00\x05\xf5\xe1\x00/' | LC_COLLATE=null sed -r 's/\x50(\*\xd7\xb1\x83[\x00-\xff]{3})/\x57\1\x44\x89\x84\x4a\x64\x0f\x3a/' > "$2"
    # Android video player just needs duration set for the segment
    #ffmpeg -y -i "${video}" -map v:0:0 -map a:0:0 -vcodec libvpx -b:v 4096k ${subopt} ${subargs} -acodec libvorbis -ar 48000 -ac 2 -ab 448000 -af volume=3 -threads ${numcores} -deadline realtime -rtbufsize 100M -f webm -t 600 - | LC_COLLATE=null sed -r 's/\x50(\*\xd7\xb1\x83[\x00-\xff]{3})/\x57\1\x44\x89\x84\x4a\x64\x0f\x3a/' > "$2"
fi

exit
