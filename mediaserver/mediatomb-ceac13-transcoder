#!/bin/bash

# Note: Must use recent ffmpeg (>2.0) instead of libav-tools' avconv for -vf subtitles to work!
# Tested with ffmpeg 4.2.

# Use hardware acceleration when available.
# Ensure your mediatomb user is in group 'video' and 'render' on Debian!
#
# Microserver N54L notes:
# For N54L Microserver, also ensure you have set the VRAM size to 512M in the
# BIOS (or at least more than the default 32M) or you will get the following:
# [7519491.423482] [drm:radeon_cs_ioctl [radeon]] *ERROR* Failed to parse relocation -12!
#
# Also ensure that the following lines appear in dmesg:
# [  173.530914] radeon 0000:01:05.0: firmware: direct-loading firmware radeon/RS780_uvd.bin
# [  173.766124] [drm] UVD initialized successfully.
#
# And you should have the following output from vainfo:
# # DISPLAY= LIBVA_DRIVER_NAME=r600 vainfo
# error: XDG_RUNTIME_DIR not set in the environment.
# error: can't connect to X server!
# libva info: VA-API version 1.4.0
# libva info: va_getDriverName() returns 0
# libva info: User requested driver 'r600'
# libva info: Trying to open /usr/lib/x86_64-linux-gnu/dri/r600_drv_video.so
# libva info: Found init function __vaDriverInit_1_4
# libva info: va_openDriver() returns 0
# vainfo: VA-API version: 1.4 (libva 2.4.0)
# vainfo: Driver version: Mesa Gallium driver 18.3.6 for AMD RS880 (DRM 2.50.0 / 4.19.0-0.bpo.6-amd64, LLVM 7.0.1)
# vainfo: Supported profile and entrypoints
#       VAProfileMPEG2Simple            : VAEntrypointVLD
#       VAProfileMPEG2Main              : VAEntrypointVLD
#       VAProfileVC1Simple              : VAEntrypointVLD
#       VAProfileVC1Main                : VAEntrypointVLD
#       VAProfileVC1Advanced            : VAEntrypointVLD
#       VAProfileH264ConstrainedBaseline: VAEntrypointVLD
#       VAProfileH264Main               : VAEntrypointVLD
#       VAProfileH264High               : VAEntrypointVLD
#       VAProfileNone                   : VAEntrypointVideoProc
#
# HEVC/libx265 notes:
# Note: Turion N54L CPU is too slow to transcode 1080p HEVC/libx265 to libvpx in
# realtime.  -vf scale doesn't help.
#
# Thus, HEVC sources can be at most 720p (with the subsequent cpu-used setting).
#
# Embedded GPU decoding doesn't help because the embedded HD4200 in the RS785E
# chipset only supports UVD 2 and no VCE.
# https://en.wikipedia.org/wiki/List_of_AMD_graphics_processing_units#IGP_(HD_4000)
#
# UVD 6 is required for HEVC decoding acceleration and VCE 3 required for HEVC
# encoding acceleration.
#
# UVD 6 and VCE 3 are available in GCN3 GPUs in the Fiji and Carrizo family
# only, and GCN4+ GPUs (e.g. Polaris).
# 
# The best GPU for this purpose is the Radeon Pro WX 2100, which costs less than $100.
# It, or another card which will work, will have the following output from vainfo:
# DISPLAY= LIBVA_DRIVER_NAME=r600 vainfo
# error: can't connect to X server!
# libva info: VA-API version 1.4.0
# libva info: va_getDriverName() returns 0
# libva info: User requested driver 'r600'
# libva info: Trying to open /usr/lib/x86_64-linux-gnu/dri/r600_drv_video.so
# libva info: Found init function __vaDriverInit_1_4
# libva info: va_openDriver() returns 0
# vainfo: VA-API version: 1.4 (libva 2.4.0)
# vainfo: Driver version: Mesa Gallium driver 18.3.6 for AMD Radeon Pro WX2100 (POLARIS12, DRM 3.27.0, 4.19.0-0.bpo.6-amd64, LLVM 7.0.1)
# vainfo: Supported profile and entrypoints
#       VAProfileMPEG2Simple            : VAEntrypointVLD
#       VAProfileMPEG2Main              : VAEntrypointVLD
#       VAProfileVC1Simple              : VAEntrypointVLD
#       VAProfileVC1Main                : VAEntrypointVLD
#       VAProfileVC1Advanced            : VAEntrypointVLD
#       VAProfileH264ConstrainedBaseline: VAEntrypointVLD
#       VAProfileH264ConstrainedBaseline: VAEntrypointEncSlice
#       VAProfileH264Main               : VAEntrypointVLD
#       VAProfileH264Main               : VAEntrypointEncSlice
#       VAProfileH264High               : VAEntrypointVLD
#       VAProfileH264High               : VAEntrypointEncSlice
#       VAProfileHEVCMain               : VAEntrypointVLD
#       VAProfileHEVCMain               : VAEntrypointEncSlice
#       VAProfileHEVCMain10             : VAEntrypointVLD
#       VAProfileJPEGBaseline           : VAEntrypointVLD
#       VAProfileNone                   : VAEntrypointVideoProc
# 
# Note: Mesa 18.1 or greater is required for HEVC decoding acceleration via UVD 6!
# On Debian, install the 'mesa-va-drivers' package.
#

hw_accel=( )
video_stream_0=$(ffmpeg -i "$1" -vcodec copy -acodec copy / 2>&1 | grep 'Stream.*#0.*Video')
# Only use HW acceleration for HEVC decoding, since copying to/from GPU memory slows down everything else.
if [ ! -z "$(echo ${video_stream_0} | grep 'hevc')" ]; then
	export LIBVA_DRIVER_NAME=r600
	hw_accel=( -hwaccel auto -hwaccel_device /dev/dri/renderD128 )
fi

# Only downscale if we are over this threshold, since downscaling itself slows things down.
# For N54L, if we're approaching 1080p then scale down to 720p.
max_width=1440
target_width=1280

# Target CPU utilization
# XXX -threads auto does not yet work for libvpx, so always use all cores.
numcores=$(nproc --all)
# Explanation for -quality realtime:
# The formula is target cpu utilisation = (100*(16-cpu-used)/16)%
# With threads, the calculation is rather confusing.  We get best results setting this to (16 / number of cores).
cpu_used=$((16 / ${numcores}))

# Target bitrate; Google Cast extension suggests Standard (1700k), High (3000k), Extreme (5000k).
bitrate=1700k

# Target quality (constant rate factor); 4 (best) to 63 (worst)
quality=10

# Volume scale (if desired)
#volume=3

# ISO-639-2 local language code
language=eng

###########################################
# No user-servicable parts below this line.
###########################################

video=$1
extension=$([[ "${video}" = *.* ]] && echo ".${video##*.}" || echo '')
subopt=
subargs=
mkvinfo_pat='Track.*audio'
ffmpeg_pat='Stream.*Video'
log_file=/tmp/transcode.log
truncate -s 0 ${log_file}

echo "$*" >> ${log_file}

width_filter=( )
stream_width=$(echo ${video_stream_0} | sed 's/^.* \([0-9]\+\)x\([0-9]\+\) .*$/\1/')
if [ "${stream_width}" -gt "${max_width}" ]; then
	width_filter=( -filter:v scale=${target_width}:-1 )
fi

# TODO: Map audio stream from e.g. if exists: Stream #0:1(eng): Audio: vorbis (libvorbis), 48000 Hz, stereo, fltp (default)
language_audio=0

# Chromecast doesn't support subtitle streams.
subtitle_map=-sn

case ${extension} in
	.mkv)
		# TODO: Sort audio tracks by number of channels for best quality.
		audiolang=$(mkvinfo -s "$1" | head -10 | grep "${mkvinfo_pat}" | grep "^ language: ${language}," | sed 's/^.*language: \([^,]*\).*$/\1/')
		if [ -z "$(echo ${audiolang} | grep ${mkvinfo_pat})" ] && ( [ -z "${audiolang}" ] || [ "${audiolang}" = "und" ] ); then
			# Try to extract from ffmpeg instead.  Try to output to '/' to force exit.
			audiolang=$(ffmpeg -i "$1" -vcodec copy -acodec copy / 2>&1 | grep "${ffmpeg_pat}" | sed 's/^.*Stream.*(\(.*\)):.*Video.*$/\1/g')
		fi
		# Render subtitles if no stream is in the native language.
		if [ -z "$(echo ${audiolang} | grep ${mkvinfo_pat})" ] && [ -z "$(echo ${audiolang} | grep ${ffmpeg_pat})" ] && [ "${audiolang}" != "${language}" ]; then
			subopt="-vf"
			# See https://ffmpeg.org/ffmpeg-filters.html#Notes-on-filtergraph-escaping about this insanity
			# First level escaping (:\').
			subargs=$(echo $1 | sed 's/\([:\\]\)/\\\1/g' | sed "s/\\('\\)/\\\\\1/g")
			# Second level escaping (\'[].;).
			subargs=$(echo ${subargs} | sed "s/\([\\'\.;]\)/\\\\\1/g" | sed 's/\[/\\[/g;s/\]/\\]/g')
			# Don't perform third level escaping (shell escape) since we are in the shell.
			# Finally, the full -vf argument string.
			subargs="subtitles=${subargs}"
			echo ${subargs}
		fi
		;;
	.iso)
		# HandBrake 1.3.0+ can transcode to webm: https://github.com/HandBrake/HandBrake/issues/388
		exec HandBrakeCLI -Z 'Chromecast 1080p30 Surround' -i $1 -o /dev/stdout
		;;

esac
# Other container formats have separate subtitle files.
# TODO

if [ ! -z "${volume}" ]; then
  audiofilter="-af"
  audiofilter_arg="volume=${volume}"
fi

############################
# Leftover stuff from original just for reference
#legenda=""
comLegenda=0
#Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, AlphaLevel, Encoding
subtitleStyle="Default,Arial,20,65535,65535,&H0,&H0,0,0,0,1,1,0,2,10,10,10,0,0"

#Levar em conta que as extens√µes podem estar maiusculas
#IFS=$(echo -e "\t\n")
#for tmpfile in $(echo $video | sed 's/....$/*/')*; do
#    filename=$(basename "$tmpfile")
#    extension="${filename##*.}"
#    echo $extension
#    if [ "$extension" == "ass" ]; then
#        echo 'Legenda ASS encontrada'
#        legenda=$(echo $video | sed 's/...$/ass/')
#        comLegenda=1
#    elif [ "$extension" == "srt" ]; then
#        echo 'Legenda SRT encontrada'
#        legenda=$(echo $video | sed 's/...$/srt/')
#        comLegenda=1
#    elif [ "$extension" == "ssa" ]; then
#        echo 'Legenda SSA encontrada'
#        legenda=$(echo $video | sed 's/...$/ssa/')
#        comLegenda=1
#    elif [ "$extension" == "sub" ]; then
#        echo 'Legenda SubRip encontrada'
#        legenda=$(echo $video | sed 's/...$/sub/')
#        comLegenda=1
#    fi
#
#done
#############################

if [ $comLegenda == 1 ]; then
    encoding=$(file -bi "$legenda" | sed -e 's/.*[ ]charset=//')
    encoding=`echo "$encoding" | tr [:lower:] [:upper:]`

    ffmpeg -y -sub_charenc "$encoding" -i "$legenda" "/tmp/legenda.ass"
    sed -i '/Style: /c\Style: '$subtitleStyle'' /tmp/legenda.ass
    exec ffmpeg -i "$video" -y -c:v libvpx -b:v 5M -crf 10 -c:a libvorbis -cpu-used 16 -threads 8 -f webm -vf subtitles="/tmp/legenda.ass" -map 0 -map -0:s "$2"

elif [ ${video##*.} == webm ]; then
    #exec ffmpeg -i "$video" -y -vcodec copy -acodec copy -f webm "$2"
    exec ffmpeg -i "$video" -y -vcodec copy -acodec copy -f webm "$2"
else
    # Always transcode the first video and first audio stream for the above configured language.
    IFS=  # Don't tokenize subargs.
    ffmpeg -y ${hw_accel[@]} -i "${video}" -rtbufsize 100M -map v:0? -map a:${language_audio}? ${subtitle_map} -c:v libvpx -b:v ${bitrate} ${width_filter[@]} -crf ${quality} -threads ${numcores} -quality realtime -cpu-used ${cpu_used} ${subopt} ${subargs} -c:a libvorbis -ar 48000 -ac 2 -aq 7 ${audiofilter} ${audiofilter_arg} -f webm - >"$2" 2>>"${log_file}"

    # Debugging
    #ffmpeg -y -i "${video}" -map v:0:0 -map a:0:0 -vcodec libvpx -b:v 4096k ${subopt} ${subargs} -acodec libvorbis -ar 48000 -ac 2 -ab 448000 -af volume=3 -threads ${numcores} -deadline realtime -rtbufsize 100M -f webm -t 600 - | LC_COLLATE=null sed -r 's/(\x18\x53\x80\x67\x01)[\x00-\xff]{7}/\1\x00\x00\x00\x05\xf5\xe1\x00/' | LC_COLLATE=null sed -r 's/\x50(\*\xd7\xb1\x83[\x00-\xff]{3})/\x57\1\x44\x89\x84\x4a\x64\x0f\x3a/' > "$2"
    # Android video player just needs duration set for the segment
    #ffmpeg -y -i "${video}" -map v:0:0 -map a:0:0 -vcodec libvpx -b:v 4096k ${subopt} ${subargs} -acodec libvorbis -ar 48000 -ac 2 -ab 448000 -af volume=3 -threads ${numcores} -deadline realtime -rtbufsize 100M -f webm -t 600 - | LC_COLLATE=null sed -r 's/\x50(\*\xd7\xb1\x83[\x00-\xff]{3})/\x57\1\x44\x89\x84\x4a\x64\x0f\x3a/' > "$2"
fi

exit
